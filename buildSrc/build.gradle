plugins {
	id "java-gradle-plugin"
	id "io.spring.javaformat" version "${javaFormatVersion}"
	id "checkstyle"
	id "eclipse"

	id "java"
	id "groovy"
}

repositories {
	mavenCentral()
	gradlePluginPortal()
	maven { url 'https://repo.spring.io/milestone' }
}
java {
	sourceCompatibility = JavaVersion.VERSION_17
}
ext {
	def propertiesFile = new File(new File("$projectDir").parentFile, "gradle.properties")
	propertiesFile.withInputStream {
		def properties = new Properties()
		properties.load(it)
		set("kotlinVersion", properties["kotlinVersion"])
	}
}
sourceCompatibility = 17
targetCompatibility = 17

sourceSets {
	main {
		java {
			srcDirs = []
		}
		groovy {
			srcDirs += ["src/main/java"]
		}
	}
}

def versions = [:]
new File(projectDir.parentFile, "gradle.properties").withInputStream {
	def properties = new Properties()
	properties.load(it)
	["assertj", "commonsCodec", "hamcrest", "junitJupiter", "kotlin", "maven"].each {
		versions[it] = properties[it + "Version"]
	}
}
versions["jackson"] = "2.15.3"
versions["springFramework"] = "6.0.12"
ext.set("versions", versions)
if (versions.springFramework.contains("-")) {
	repositories {
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://repo.spring.io/snapshot" }
	}
}

checkstyle {
	toolVersion = "10.12.4"
}


dependencies {
//	spring-framework
	checkstyle "io.spring.javaformat:spring-javaformat-checkstyle:${javaFormatVersion}"
	implementation "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
	implementation "org.jetbrains.kotlin:kotlin-compiler-embeddable:${kotlinVersion}"
	implementation "org.gradle:test-retry-gradle-plugin:1.5.6"
	implementation "io.spring.javaformat:spring-javaformat-gradle-plugin:${javaFormatVersion}"
	implementation "io.spring.nohttp:nohttp-gradle:0.0.11"

//	spring-boot
	checkstyle("com.puppycrawl.tools:checkstyle:${checkstyle.toolVersion}")
	checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:${javaFormatVersion}")

	implementation(platform("org.springframework:spring-framework-bom:${versions.springFramework}"))
	implementation("com.diffplug.gradle:goomph:3.37.2")
	implementation("com.fasterxml.jackson.core:jackson-databind:${versions.jackson}")
	implementation("com.gradle:gradle-enterprise-gradle-plugin:3.12.1")
	implementation("com.tngtech.archunit:archunit:1.0.0")
	implementation("commons-codec:commons-codec:${versions.commonsCodec}")
	implementation("de.undercouch.download:de.undercouch.download.gradle.plugin:5.5.0")
	implementation("io.spring.javaformat:spring-javaformat-gradle-plugin:${javaFormatVersion}")
	implementation("org.apache.httpcomponents.client5:httpclient5:5.3.1")
	implementation("org.apache.maven:maven-embedder:${versions.maven}")
	implementation("org.asciidoctor:asciidoctor-gradle-jvm:3.3.2")
	implementation("org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}")
	implementation("org.jetbrains.kotlin:kotlin-compiler-embeddable:${versions.kotlin}")
	implementation("org.springframework:spring-context")
	implementation("org.springframework:spring-core")
	implementation("org.springframework:spring-web")

	testImplementation("org.assertj:assertj-core:${versions.assertj}")
	testImplementation("org.hamcrest:hamcrest:${versions.hamcrest}")
	testImplementation("org.junit.jupiter:junit-jupiter:${versions.junitJupiter}")
	testImplementation("org.springframework:spring-test")

	testRuntimeOnly("org.junit.platform:junit-platform-launcher")

//	spring-security
	implementation platform(libs.io.projectreactor.reactor.bom)

	implementation libs.com.google.code.gson.gson
	implementation libs.com.thaiopensource.trag
	implementation libs.net.sourceforge.saxon.saxon
	implementation libs.org.yaml.snakeyaml
	implementation localGroovy()

	implementation libs.io.github.gradle.nexus.publish.plugin
	implementation 'io.projectreactor:reactor-core'
	implementation libs.org.gretty.gretty
	implementation libs.com.github.ben.manes.gradle.versions.plugin
	implementation libs.com.github.spullara.mustache.java.compiler
	implementation libs.io.spring.javaformat.spring.javaformat.gradle.plugin
	implementation libs.io.spring.nohttp.nohttp.gradle
	implementation (libs.net.sourceforge.htmlunit) {
		exclude group: 'org.eclipse.jetty.websocket', module: 'websocket-client'
	}
	implementation libs.org.hidetake.gradle.ssh.plugin
	implementation libs.org.jfrog.buildinfo.build.info.extractor.gradle
	implementation libs.org.sonarsource.scanner.gradle.sonarqube.gradle.plugin
	implementation libs.com.squareup.okhttp3.okhttp
	implementation libs.io.spring.security.release.plugin

	testImplementation platform(libs.org.junit.junit.bom)
	testImplementation platform(libs.org.mockito.mockito.bom)
	testImplementation "org.junit.jupiter:junit-jupiter-api"
	testImplementation "org.junit.jupiter:junit-jupiter-params"
	testImplementation "org.junit.jupiter:junit-jupiter-engine"
	testImplementation libs.org.apache.commons.commons.io
	testImplementation libs.org.assertj.assertj.core
	testImplementation 'org.mockito:mockito-core'
	testImplementation 'org.mockito:mockito-junit-jupiter'
	testImplementation libs.com.squareup.okhttp3.mockwebserver
}

gradlePlugin {
	plugins {
//		spring-framework
		conventionsPlugin1 {
			id = "org.springframework.build.conventions"
			implementationClass = "org.springframework.build.ConventionsPlugin"
		}
		localDevPlugin1 {
			id = "org.springframework.build.localdev"
			implementationClass = "org.springframework.build.dev.LocalDevelopmentPlugin"
		}
		optionalDependenciesPlugin1 {
			id = "org.springframework.build.optional-dependencies"
			implementationClass = "org.springframework.build.optional.OptionalDependenciesPlugin"
		}
		runtimeHintsAgentPlugin1 {
			id = "org.springframework.build.runtimehints-agent"
			implementationClass = "org.springframework.build.hint.RuntimeHintsAgentPlugin"
		}

//		spring-boot
		annotationProcessorPlugin {
			id = "org.springframework.boot.annotation-processor"
			implementationClass = "org.springframework.boot.build.processors.AnnotationProcessorPlugin"
		}
		architecturePlugin {
			id = "org.springframework.boot.architecture"
			implementationClass = "org.springframework.boot.build.architecture.ArchitecturePlugin"
		}
		autoConfigurationPlugin {
			id = "org.springframework.boot.auto-configuration"
			implementationClass = "org.springframework.boot.build.autoconfigure.AutoConfigurationPlugin"
		}
		bomPlugin {
			id = "org.springframework.boot.bom"
			implementationClass = "org.springframework.boot.build.bom.BomPlugin"
		}
		configurationPropertiesPlugin {
			id = "org.springframework.boot.configuration-properties"
			implementationClass = "org.springframework.boot.build.context.properties.ConfigurationPropertiesPlugin"
		}
		conventionsPlugin {
			id = "org.springframework.boot.conventions"
			implementationClass = "org.springframework.boot.build.ConventionsPlugin"
		}
		deployedPlugin {
			id = "org.springframework.boot.deployed"
			implementationClass = "org.springframework.boot.build.DeployedPlugin"
		}
		integrationTestPlugin {
			id = "org.springframework.boot.integration-test"
			implementationClass = "org.springframework.boot.build.test.IntegrationTestPlugin"
		}
		systemTestPlugin {
			id = "org.springframework.boot.system-test"
			implementationClass = "org.springframework.boot.build.test.SystemTestPlugin"
		}
		mavenPluginPlugin {
			id = "org.springframework.boot.maven-plugin"
			implementationClass = "org.springframework.boot.build.mavenplugin.MavenPluginPlugin"
		}
		mavenRepositoryPlugin {
			id = "org.springframework.boot.maven-repository"
			implementationClass = "org.springframework.boot.build.MavenRepositoryPlugin"
		}
		optionalDependenciesPlugin {
			id = "org.springframework.boot.optional-dependencies"
			implementationClass = "org.springframework.boot.build.optional.OptionalDependenciesPlugin"
		}
		processedAnnotationsPlugin {
			id = "org.springframework.boot.processed-annotations"
			implementationClass = "org.springframework.boot.build.processors.ProcessedAnnotationsPlugin"
		}
		starterPlugin {
			id = "org.springframework.boot.starter"
			implementationClass = "org.springframework.boot.build.starters.StarterPlugin"
		}
		testFailuresPlugin {
			id = "org.springframework.boot.test-failures"
			implementationClass = "org.springframework.boot.build.testing.TestFailuresPlugin"
		}

//		spring-security
		trang {
			id = "trang"
			implementationClass = "trang.TrangPlugin"
		}
		locks {
			id = "locks"
			implementationClass = "lock.GlobalLockPlugin"
		}
		managementConfiguration {
			id = "io.spring.convention.management-configuration"
			implementationClass = "io.spring.gradle.convention.ManagementConfigurationPlugin"
		}
		s101 {
			id = "s101"
			implementationClass = "s101.S101Plugin"
		}
		verifyDependenciesVersions {
			id = "org.springframework.security.versions.verify-dependencies-versions"
			implementationClass = "org.springframework.security.convention.versions.VerifyDependenciesVersionsPlugin"
		}
	}
}
test {
	useJUnitPlatform()
}

eclipse.classpath.file.whenMerged {
	def jreEntry = entries.find { it.path.contains("org.eclipse.jdt.launching.JRE_CONTAINER") }
	jreEntry.entryAttributes['module'] = 'true'
	jreEntry.entryAttributes['limit-modules'] = 'java.base'
}
configurations {
	implementation {
		exclude module: 'groovy-all'
	}
}
tasks.named('test', Test).configure {
	onlyIf { !project.hasProperty("buildSrc.skipTests") }
	useJUnitPlatform()
	jvmArgs(
			'--add-opens', 'java.base/java.lang=ALL-UNNAMED',
			'--add-opens', 'java.base/java.util=ALL-UNNAMED'
	)
}
