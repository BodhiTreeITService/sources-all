import io.spring.gradle.IncludeRepoTask
import trang.RncToXsd

buildscript {
	dependencies {
		classpath libs.io.spring.javaformat.spring.javaformat.gradle.plugin
		classpath libs.io.spring.nohttp.nohttp.gradle
		classpath libs.io.freefair.gradle.aspectj.plugin
		classpath libs.org.jetbrains.kotlin.kotlin.gradle.plugin
		classpath libs.com.netflix.nebula.nebula.project.plugin
	}
	repositories {
		maven { url 'https://plugins.gradle.org/m2/' }
	}
}

plugins {
//	spring-framework
	id 'io.freefair.aspectj' version '8.4' apply false
	// kotlinVersion is managed in gradle.properties
	id 'org.jetbrains.kotlin.plugin.serialization' version "${kotlinVersion}" apply false
	id 'org.jetbrains.dokka' version '1.8.20'
	id 'org.unbroken-dome.xjc' version '2.0.0' apply false
//	id 'com.github.ben-manes.versions' version '0.51.0'
	id 'com.github.ben-manes.versions'
	id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
//	id 'de.undercouch.download' version '5.4.0'
	id 'de.undercouch.download'
	id 'me.champeau.jmh' version '0.7.2' apply false
	id 'me.champeau.mrjar' version '0.1.1'

//	spring boot
	id "base"
	id "org.jetbrains.kotlin.jvm" apply false // https://youtrack.jetbrains.com/issue/KT-30276
//	id "io.spring.nohttp" version "0.0.11"
	id "io.spring.nohttp"

//	spring security
	alias(libs.plugins.org.gradle.wrapper.upgrade)

//  sources-all
	id "war"
	id "org.springframework.boot.conventions"
}
configurations {
	providedRuntime {
		extendsFrom dependencyManagement
	}
}
dependencies {
	implementation(project(":spring-boot-project:spring-boot-starters:spring-boot-starter-web"))
//	implementation project(":spring-boot-project:spring-boot-starters:spring-boot-starter-tomcat")

	implementation(project(":spring-boot-project:spring-boot-starters:spring-boot-starter-test"))
}

tasks.named('test') {
	useJUnitPlatform()
}

ext {
	springBootProjects = subprojects.findAll { it.name.startsWith("spring-boot") }
	springSecurityProjects = subprojects.findAll { it.name.startsWith("spring-security") }
	springFrameworkProjects = subprojects - springBootProjects - springSecurityProjects
	moduleProjects = springFrameworkProjects.findAll { it.name.startsWith("spring-") }
	javaProjects = springFrameworkProjects.findAll { !it.name.startsWith("framework-") }


//	moduleProjects = subprojects.findAll { it.name.startsWith("spring-") && !it.name.startsWith("spring-boot") }
//	javaProjects = subprojects.findAll { !it.name.startsWith("framework-") && !it.name.startsWith("spring-boot") }
//	springBootProjects = subprojects.findAll { it.name.startsWith("spring-boot") }
}

description = "sources"

configure(allprojects) { project ->
	if(project.name.startsWith("spring-boot")){
		group "org.springframework.boot"
		version = springBootVersion
	}
	else if(project.name.startsWith("spring-security")){
		group "org.springframework.security"
		version = springSecurityVersion
	}
	else {
		apply plugin: "org.springframework.build.localdev"
		group = "org.springframework"
		version = springFrameworkVersion
	}
	repositories {
		mavenCentral()
		maven {
			url "https://repo.spring.io/milestone"
			content {
				// Netty 5 optional support
				includeGroup 'io.projectreactor.netty'
			}
		}
		if (version.contains('-')) {
			maven { url "https://repo.spring.io/milestone" }
		}
		if (version.endsWith('-SNAPSHOT')) {
			maven { url "https://repo.spring.io/snapshot" }
		}
	}
	configurations.all {
		resolutionStrategy {
			cacheChangingModulesFor 0, "seconds"
			cacheDynamicVersionsFor 0, "seconds"
		}
	}
}

configure(allprojects - project(":framework-platform") - springBootProjects -springSecurityProjects) {
	configurations {
		dependencyManagement {
			canBeConsumed = false
			canBeResolved = false
			visible = false
		}
		matching { it.name.endsWith("Classpath") }.all { it.extendsFrom(dependencyManagement) }
	}
	dependencies {
		dependencyManagement(enforcedPlatform(dependencies.project(path: ":framework-platform")))
	}
}

configure([rootProject] + javaProjects) { project ->
	apply plugin: "java"
	apply plugin: "java-test-fixtures"
	apply plugin: 'org.springframework.build.conventions'
	apply from: "${rootDir}/gradle/toolchains.gradle"
	apply from: "${rootDir}/gradle/ide.gradle"

	dependencies {
		testImplementation("org.junit.jupiter:junit-jupiter-api")
		testImplementation("org.junit.jupiter:junit-jupiter-params")
		testImplementation("org.junit.platform:junit-platform-suite-api")
		testImplementation("org.mockito:mockito-core")
		testImplementation("org.mockito:mockito-junit-jupiter")
		testImplementation("io.mockk:mockk")
		testImplementation("org.assertj:assertj-core")
		// Pull in the latest JUnit 5 Launcher API to ensure proper support in IDEs.
		testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
		testRuntimeOnly("org.junit.platform:junit-platform-launcher")
		testRuntimeOnly("org.junit.platform:junit-platform-suite-engine")
		testRuntimeOnly("org.apache.logging.log4j:log4j-core")
		testRuntimeOnly("org.apache.logging.log4j:log4j-jul")
		testRuntimeOnly("org.apache.logging.log4j:log4j-slf4j2-impl")
		// JSR-305 only used for non-required meta-annotations
		compileOnly("com.google.code.findbugs:jsr305")
		testCompileOnly("com.google.code.findbugs:jsr305")
	}

	ext.javadocLinks = [
			"https://docs.oracle.com/en/java/javase/17/docs/api/",
			"https://jakarta.ee/specifications/platform/9/apidocs/",
			"https://docs.oracle.com/cd/E13222_01/wls/docs90/javadocs/",  // CommonJ and weblogic.* packages
			"https://www.ibm.com/docs/api/v1/content/SSEQTP_8.5.5/com.ibm.websphere.javadoc.doc/web/apidocs/", // com.ibm.*
			"https://docs.jboss.org/jbossas/javadoc/4.0.5/connector/", // org.jboss.resource.*
			"https://docs.jboss.org/hibernate/orm/5.6/javadocs/",
			"https://eclipse.dev/aspectj/doc/released/aspectj5rt-api",
			"https://www.quartz-scheduler.org/api/2.3.0/",
			"https://fasterxml.github.io/jackson-core/javadoc/2.14/",
			"https://fasterxml.github.io/jackson-databind/javadoc/2.14/",
			"https://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.14/",
			"https://hc.apache.org/httpcomponents-client-5.2.x/current/httpclient5/apidocs/",
			"https://projectreactor.io/docs/test/release/api/",
			"https://junit.org/junit4/javadoc/4.13.2/",
			// TODO Uncomment link to JUnit 5 docs once we execute Gradle with Java 18+.
			// See https://github.com/spring-projects/spring-framework/issues/27497
			//
			// "https://junit.org/junit5/docs/5.10.2/api/",
			"https://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/",
			//"https://javadoc.io/static/io.rsocket/rsocket-core/1.1.1/",
			"https://r2dbc.io/spec/1.0.0.RELEASE/api/",
			// Previously there could be a split-package issue between JSR250 and JSR305 javax.annotation packages,
			// but since 6.0 JSR 250 annotations such as @Resource and @PostConstruct have been replaced by their
			// JakartaEE equivalents in the jakarta.annotation package.
			//"https://www.javadoc.io/doc/com.google.code.findbugs/jsr305/3.0.2/"
	] as String[]
}

configure(moduleProjects) { project ->
	apply from: "${rootDir}/gradle/spring-module.gradle"
}


// spring boot
defaultTasks 'build'

nohttp {
	allowlistFile = project.file("src/nohttp/allowlist.lines")
	source.exclude "**/bin/**"
	source.exclude "**/build/**"
	source.exclude "**/out/**"
	source.exclude "**/target/**"
	source.exclude "**/.settings/**"
	source.exclude "**/.classpath"
	source.exclude "**/.project"
	source.exclude "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/resources/org/springframework/boot/buildpack/platform/docker/export.tar"
}

check {
	dependsOn checkstyleNohttp
}

//allprojects.each {project
//	if(project.name.startsWith('spring-boot')){
//		group "org.springframework.boot"
//	}
//
//	repositories {
//		mavenCentral()
//		if (version.contains('-')) {
//			maven { url "https://repo.spring.io/milestone" }
//		}
//		if (version.endsWith('-SNAPSHOT')) {
//			maven { url "https://repo.spring.io/snapshot" }
//		}
//	}
//
//	configurations.all {
//		resolutionStrategy.cacheChangingModulesFor 0, "minutes"
//	}
//}

tasks.named("checkstyleNohttp").configure {
	maxHeapSize = "1536m"
}



apply plugin: 'io.spring.nohttp'
apply plugin: 'locks'
apply plugin: 's101'
apply plugin: 'io.spring.convention.root'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.springframework.security.versions.verify-dependencies-versions'
apply plugin: 'io.spring.security.release'

configure(springSecurityProjects){
	group = 'org.springframework.security'
	description = 'Spring Security'
}
println("---------------version-${springSecurityVersion}-------------")
ext.snapshotBuild = springSecurityVersion.contains("SNAPSHOT")
ext.releaseBuild = springSecurityVersion.contains("SNAPSHOT")
ext.milestoneBuild = !(snapshotBuild || releaseBuild)

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/milestone" }
}

springRelease {
	weekOfMonth = 3
	dayOfWeek = 1
	referenceDocUrl = "https://docs.spring.io/spring-security/reference/{version}/index.html"
	apiDocUrl = "https://docs.spring.io/spring-security/docs/{version}/api/"
	replaceSnapshotVersionInReferenceDocUrl = true
}

def toolchainVersion() {
	if (project.hasProperty('testToolchain')) {
		return project.property('testToolchain').toString().toInteger()
	}
	return 17
}

subprojects {
	if (project.name.startsWith("spring-security")){
		java {
			toolchain {
				languageVersion = JavaLanguageVersion.of(toolchainVersion())
			}
		}
		kotlin {
			jvmToolchain {
				languageVersion = JavaLanguageVersion.of(17)
			}
		}
		tasks.withType(JavaCompile).configureEach {
			options.encoding = "UTF-8"
			options.compilerArgs.add("-parameters")
			options.release.set(17)
		}
	}

}

allprojects {
	if (project.name.startsWith("spring-security")){
		if (!['spring-security-bom', 'spring-security-docs'].contains(project.name)) {
			apply plugin: 'io.spring.javaformat'
			apply plugin: 'checkstyle'

			pluginManager.withPlugin("io.spring.convention.checkstyle", { plugin ->
				configure(plugin) {
					dependencies {
						checkstyle libs.io.spring.javaformat.spring.javaformat.checkstyle
					}
					checkstyle {
						toolVersion = '8.34'
					}
				}
			})

			if (project.name.contains('sample')) {
				tasks.whenTaskAdded { task ->
					if (task.name.contains('format') || task.name.contains('checkFormat') || task.name.contains("checkstyle")) {
						task.enabled = false
					}
				}
			}
		}
	}

}

if (hasProperty('buildScan')) {
	buildScan {
		termsOfServiceUrl = 'https://gradle.com/terms-of-service'
		termsOfServiceAgree = 'yes'
	}
}

nohttp {
	source.exclude "buildSrc/build/**"
	source.builtBy(project(':spring-security-config').tasks.withType(RncToXsd))
}

tasks.register('cloneRepository', IncludeRepoTask) {
	repository = project.getProperties().get("repositoryName")
	ref = project.getProperties().get("ref")
	var defaultDirectory = project.file("build/tmp/clone")
	outputDirectory = project.hasProperty("cloneOutputDirectory") ? project.file("$cloneOutputDirectory") : defaultDirectory
}
tasks.compileJava {
	options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}

s101 {
	repository = 'https://structure101.com/binaries/latest'
	configurationDirectory = project.file("etc/s101")
}

wrapperUpgrade {
	gradle {
		'spring-security' {
			repo = 'spring-projects/spring-security'
			baseBranch = '6.1.x' // runs only on 6.1.x and the update is merged forward to main
		}
	}
}
